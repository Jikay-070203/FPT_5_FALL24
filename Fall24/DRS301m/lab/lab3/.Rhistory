library(corrplot)
library(dplyr)
# Load your dataset (replace 'your_data.csv' with the actual file path)
data <- read.csv("your_data.csv")
# Load necessary libraries
library(corrplot)
library(dplyr)
# Load your dataset (replace 'your_data.csv' with the actual file path)
data <- read.csv("lax_to_jfk.csv")
# Load necessary libraries
library(corrplot)
library(dplyr)
# Load your dataset (replace 'your_data.csv' with the actual file path)
data <- read.csv(""D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_jfk.csv"")
# Load necessary libraries
library(corrplot)
library(dplyr)
# Load your dataset (replace 'your_data.csv' with the actual file path)
data <- read.csv("D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_jfk.csv")
# Select numeric columns from the dataset and store them in 'numeric_vars'
numeric_vars <- data %>% select_if(is.numeric)
# Remove columns with too many missing values
numeric_vars_clean <- numeric_vars %>% select_if(~sum(is.na(.)) < nrow(numeric_vars))
# Calculate the correlation matrix
cor_matrix <- cor(numeric_vars_clean, use = "complete.obs")
# Visualize the correlation matrix
corrplot(cor_matrix, method = "color", tl.cex = 0.7, addCoef.col = "black", number.cex = 0.7)
# Load the corrplot package
library(corrplot)
# Remove columns with too many missing values
numeric_vars_clean <- numeric_vars %>% select_if(~sum(is.na(.)) < nrow(numeric_vars))
# Calculate the correlation matrix on cleaned data
cor_matrix <- cor(numeric_vars_clean, use = "complete.obs")
# Visualize the correlation matrix
corrplot(cor_matrix, method = "color", tl.cex = 0.7, addCoef.col = "black", number.cex = 0.7)
# Load dplyr if not already loaded
library(dplyr)
# Calculate average ArrDelayMinutes for each airline
average_arr_delay <- sub_airline %>%
group_by(Reporting_Airline) %>%
summarise(Average_ArrDelay = mean(ArrDelayMinutes, na.rm = TRUE))
# Display the results
average_arr_delay
# Filter the data for American Airlines and Alaska Airlines
aa_ak_data <- sub_airline %>%
filter(Reporting_Airline %in% c("AA", "AS")) # Replace with actual abbreviations if different
# Perform ANOVA test
anova_result <- aov(ArrDelayMinutes ~ Reporting_Airline, data = aa_ak_data)
summary(anova_result)
# Load ggplot2 if not already loaded
library(ggplot2)
# Create bar plot for average arrival delays by airline
ggplot(average_arr_delay, aes(x = reorder(Reporting_Airline, Average_ArrDelay), y = Average_ArrDelay)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() + # Optional: flip the coordinates for better readability
labs(title = "Average Arrival Delays by Airline",
x = "Airline",
y = "Average Arrival Delay (Minutes)") +
theme_minimal()
# Load the required libraries
library(tidyverse)
library(readr)
library(httr)
# Kaggle has no internet access for direct file download, so use httr to download the file
url <- "https://dax-cdn.cdn.appdomain.cloud/dax-airline/1.0.1/lax_to_jfk.tar.gz"
# Use httr to download the file
GET(url, write_disk("lax_to_jfk.tar.gz", overwrite = TRUE))
# Untar the file in Kaggle (no need for tar = "internal")
untar("lax_to_jfk.tar.gz")
# Read the CSV file
sub_airline <- read_csv("lax_to_jfk/lax_to_jfk.csv",
col_types = cols('DivDistance' = col_number(),
'DivArrDelay' = col_number()))
# Check the first few rows
head(sub_airline)
# Check the dimensions of the dataset
dim(sub_airline)
# Check the names of the columns (variables)
colnames(sub_airline)
# Summary of the dataset to check for missing values or unusual entries
summary(sub_airline)
# Boxplot of arrival delays by airline
ggplot(sub_airline, aes(x = Reporting_Airline, y = ArrDelay)) +
geom_boxplot() +
labs(title = "Boxplot of Arrival Delays by Airline",
x = "Airline",
y = "Arrival Delay (minutes)") +
theme_minimal()
# Filter for Alaska Airlines flights (assuming code "AS")
alaska_flights <- sub_airline %>% filter(Reporting_Airline == "AS")
# Scatter plot of departure delays vs. arrival delays for Alaska Airlines
ggplot(alaska_flights, aes(x = DepDelay, y = ArrDelay)) +
geom_point(alpha = 0.5) +
labs(title = "Departure Delays vs. Arrival Delays for Alaska Airlines",
x = "Departure Delay (minutes)",
y = "Arrival Delay (minutes)") +
theme_minimal()
# Calculate the average flight delay by airline and day of the week
avg_delay <- sub_airline %>%
group_by(Reporting_Airline, DayOfWeek) %>%
summarise(AvgDelay = mean(ArrDelay, na.rm = TRUE), .groups = "drop")
# Create a heatmap of average flight delays by airline and day of week
ggplot(avg_delay, aes(x = DayOfWeek, y = Reporting_Airline, fill = AvgDelay)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Heatmap of Average Flight Delays by Airline and Day of Week",
x = "Day of the Week",
y = "Airline",
fill = "Avg Delay (minutes)") +
theme_minimal()
# Calculate correlation between DepDelayMinutes and ArrDelayMinutes
correlation <- cor(sub_airline$DepDelayMinutes, sub_airline$ArrDelayMinutes, use = "complete.obs")
correlation
# Linear regression: CarrierDelay vs. ArrDelayMinutes
linear_model <- lm(ArrDelayMinutes ~ CarrierDelay, data = sub_airline)
summary(linear_model)
# Load necessary libraries
library(corrplot)
library(dplyr)
# Load your dataset (replace 'your_data.csv' with the actual file path)
data <- read.csv("D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_jfk.csv")
# Select numeric columns from the dataset and store them in 'numeric_vars'
numeric_vars <- data %>% select_if(is.numeric)
# Remove columns with too many missing values
numeric_vars_clean <- numeric_vars %>% select_if(~sum(is.na(.)) < nrow(numeric_vars))
# Calculate the correlation matrix
cor_matrix <- cor(numeric_vars_clean, use = "complete.obs")
# Visualize the correlation matrix
corrplot(cor_matrix, method = "color", tl.cex = 0.7, addCoef.col = "black", number.cex = 0.7)
# Load dplyr if not already loaded
library(dplyr)
# Calculate average ArrDelayMinutes for each airline
average_arr_delay <- sub_airline %>%
group_by(Reporting_Airline) %>%
summarise(Average_ArrDelay = mean(ArrDelayMinutes, na.rm = TRUE))
# Display the results
average_arr_delay
# Filter the data for American Airlines and Alaska Airlines
aa_ak_data <- sub_airline %>%
filter(Reporting_Airline %in% c("AA", "AS")) # Replace with actual abbreviations if different
# Perform ANOVA test
anova_result <- aov(ArrDelayMinutes ~ Reporting_Airline, data = aa_ak_data)
summary(anova_result)
# Load ggplot2 if not already loaded
library(ggplot2)
# Create bar plot for average arrival delays by airline
ggplot(average_arr_delay, aes(x = reorder(Reporting_Airline, Average_ArrDelay), y = Average_ArrDelay)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() + # Optional: flip the coordinates for better readability
labs(title = "Average Arrival Delays by Airline",
x = "Airline",
y = "Average Arrival Delay (Minutes)") +
theme_minimal()
# Load tidyverse
library(tidyverse)
# Install required packages
install.packages("readr")
# Load the necessary libraries
library(readr)
library(httr)
# Kaggle has no internet access for direct file download, so use httr to download the file
url <- "https://dax-cdn.cdn.appdomain.cloud/dax-airline/1.0.1/lax_to_jfk.tar.gz"
# Use httr to download the file
GET(url, write_disk("lax_to_jfk.tar.gz", overwrite = TRUE))
# Kaggle has no internet access for direct file download, so use httr to download the file
url <- "https://dax-cdn.cdn.appdomain.cloud/dax-airline/1.0.1/lax_to_jfk.tar.gz"
# Use httr to download the file
GET(url, write_disk("lax_to_jfk.tar.gz", overwrite = TRUE))
# Load the httr package
library(httr)
# URL to download the file
url <- "https://dax-cdn.cdn.appdomain.cloud/dax-airline/1.0.1/lax_to_jfk.tar.gz"
# Download the file using httr
GET(url, write_disk("lax_to_jfk.tar.gz", overwrite = TRUE))
# Untar the file in Kaggle (no need for tar = "internal")
untar("lax_to_jfk.tar.gz")
# Read the CSV file
sub_airline <- read_csv("lax_to_jfk/lax_to_jfk.csv",
col_types = cols('DivDistance' = col_number(),
'DivArrDelay' = col_number()))
# Untar the file in Kaggle (no need for tar = "internal")
untar("lax_to_jfk.tar.gz")
# Read the CSV file
sub_airline <- read_csv("D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_jfk.csv",
col_types = cols('DivDistance' = col_number(),
'DivArrDelay' = col_number()))
# Untar the file in Kaggle (no need for tar = "internal")
untar("lax_to_jfk.tar.gz")
# Read the CSV file
sub_airline <- read_csv("D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_fk.csv",
col_types = cols('DivDistance' = col_number(),
'DivArrDelay' = col_number()))
# Untar the file in Kaggle (no need for tar = "internal")
untar("lax_to_jfk.tar.gz")
# Read the CSV file
sub_airline <- read_csv("D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_jfk.csv",
col_types = cols('DivDistance' = col_number(),
'DivArrDelay' = col_number()))
# Untar the file in Kaggle (no need for tar = "internal")
untar("lax_to_jfk.tar.gz")
# Read the CSV file
sub_airline <- read.csv("D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_jfk.csv")
col_types = cols('DivDistance' = col_number(),
'DivArrDelay' = col_number()))
# Untar the file in Kaggle (no need for tar = "internal")
untar("lax_to_jfk.tar.gz")
# Read the CSV file
sub_airline <- read.csv("D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_jfk.csv"),
# Untar the file in Kaggle (no need for tar = "internal")
untar("lax_to_jfk.tar.gz")
# Read the CSV file
sub_airline <- read.csv("D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_jfk.csv",
col_types = cols('DivDistance' = col_number(),
'DivArrDelay' = col_number()))
# Untar the file in Kaggle (no need for tar = "internal")
untar("lax_to_jfk.tar.gz")
# Read the CSV file
sub_airline <- read.csv("D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_jfk.csv",col_types = cols('DivDistance' = col_number(), 'DivArrDelay' = col_number()))
# Untar the file in Kaggle (no need for tar = "internal")
untar("lax_to_jfk.tar.gz")
# Read the CSV file
sub_airline <- read.csv("D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_jfk.csv",col_types = cols('DivDistance' = col_number(), 'DivArrDelay' = col_number()))
# Untar the file in Kaggle (no need for tar = "internal")
untar("lax_to_jfk.tar.gz")
# Read the CSV file
# Note the change to the file path
sub_airline <- read.csv("lax_to_jfk.csv", col_types = cols('DivDistance' = col_number(), 'DivArrDelay' = col_number()))
# Load necessary packages
library(httr)
library(readr)  # For the cols() function
# Untar the file in Kaggle
untar("lax_to_jfk.tar.gz")
# Read the CSV file using readr
sub_airline <- read_csv("lax_to_jfk.csv", col_types = cols(DivDistance = col_number(), DivArrDelay = col_number()))
# Load necessary packages
library(httr)
library(readr)  # For the cols() function
# Untar the file in Kaggle
untar("lax_to_jfk.tar.gz")
# Read the CSV file using readr
sub_airline <- read_csv("D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_jfk.csv", col_types = cols(DivDistance = col_number(), DivArrDelay = col_number()))
# Check the first few rows
head(sub_airline)
# 1. Inspect for missing values
print("Missing values summary:")
print(summary(is.na(sub_airline)))
print(sapply(sub_airline, function(x) sum(is.na(x)))) # Missing values per column
# 2. Handling missing values in specific columns
# Replace and remove
sub_airline_cleaned <- sub_airline %>%
mutate(across(c(CarrierDelay, WeatherDelay, NASDelay, SecurityDelay, LateAircraftDelay), ~replace_na(., 0))) %>%
select(-DivDistance, -DivArrDelay)
library(httr)
library(readr)
library(dplyr)
# 2. Handling missing values in specific columns
# Replace and remove
sub_airline_cleaned <- sub_airline %>%
mutate(across(c(CarrierDelay, WeatherDelay, NASDelay, SecurityDelay, LateAircraftDelay), ~replace_na(., 0))) %>%
select(-DivDistance, -DivArrDelay)
library(httr)
library(readr)
library(dplyr)
# 2. Handling missing values in specific columns
# Replace and remove
sub_airline_cleaned <- sub_airline %>%
mutate(across(c(CarrierDelay, WeatherDelay, NASDelay, SecurityDelay, LateAircraftDelay), ~replace_na(., 0))) %>%
select(-DivDistance, -DivArrDelay)
library(httr)
library(readr)
library(dplyr)
library(tidyr)
# 2. Handling missing values in specific columns
# Replace and remove
sub_airline_cleaned <- sub_airline %>%
mutate(across(c(CarrierDelay, WeatherDelay, NASDelay, SecurityDelay, LateAircraftDelay), ~replace_na(., 0))) %>%
select(-DivDistance, -DivArrDelay)
# Check the first few rows of the cleaned data
head(sub_airline_cleaned)
print("Missing values summary after handling structural NAs:")
print(summary(is.na(sub_airline_cleaned)))
print(sapply(sub_airline_cleaned, function(x) sum(is.na(x))))
# Simple scaling (dividing by max)
sub_airline_cleaned <- sub_airline_cleaned %>%
mutate(ArrDelay_simple_scaled = ArrDelay / max(ArrDelay, na.rm = TRUE),
DepDelay_simple_scaled = DepDelay / max(DepDelay, na.rm = TRUE))
# Simple scaling (dividing by max)
sub_airline_cleaned <- sub_airline_cleaned %>%
mutate(ArrDelay_simple_scaled = ArrDelay / max(ArrDelay, na.rm = TRUE),
DepDelay_simple_scaled = DepDelay / max(DepDelay, na.rm = TRUE))
# Min-Max Scaling
sub_airline_cleaned <- sub_airline_cleaned %>%
mutate(ArrDelay_minmax_scaled = (ArrDelay - min(ArrDelay, na.rm = TRUE)) /
(max(ArrDelay, na.rm = TRUE) - min(ArrDelay, na.rm = TRUE)),
DepDelay_minmax_scaled = (DepDelay - min(DepDelay, na.rm = TRUE)) /
(max(DepDelay, na.rm = TRUE) - min(DepDelay, na.rm = TRUE)))
# Min-Max Scaling
sub_airline_cleaned <- sub_airline_cleaned %>%
mutate(ArrDelay_minmax_scaled = (ArrDelay - min(ArrDelay, na.rm = TRUE)) /
(max(ArrDelay, na.rm = TRUE) - min(ArrDelay, na.rm = TRUE)),
DepDelay_minmax_scaled = (DepDelay - min(DepDelay, na.rm = TRUE)) /
(max(DepDelay, na.rm = TRUE) - min(DepDelay, na.rm = TRUE)))
# Z-score Standardization
sub_airline_cleaned <- sub_airline_cleaned %>%
mutate(ArrDelay_zscore = (ArrDelay - mean(ArrDelay, na.rm = TRUE)) / sd(ArrDelay, na.rm = TRUE),
DepDelay_zscore = (DepDelay - mean(DepDelay, na.rm = TRUE)) / sd(DepDelay, na.rm = TRUE))
# 3. Compare the results using histograms
install.packages("ggplot2")
library(ggplot2)
ggplot(sub_airline, aes(x = CarrierDelay)) +
geom_histogram() +
ggtitle("Carrier Delay (Original Data)")
ggplot(sub_airline_cleaned, aes(x = CarrierDelay)) +
geom_histogram() +
ggtitle("Carrier Delay (Cleaned Data)")
# 3. Compare the results using histograms
install.packages("ggplot2")
library(ggplot2)
# ArrDelay comparison
p1 <- ggplot(sub_airline_cleaned, aes(x = ArrDelay_simple_scaled)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.6) +
ggtitle("ArrDelay: Simple Scaling") +
theme_minimal()
# Load tidyverse
library(tidyverse)
# Install required packages
install.packages("readr")
# Load the necessary libraries
library(readr)
library(httr)
# Load the httr package
library(httr)
# URL to download the file
url <- "https://dax-cdn.cdn.appdomain.cloud/dax-airline/1.0.1/lax_to_jfk.tar.gz"
# Download the file using httr
GET(url, write_disk("lax_to_jfk.tar.gz", overwrite = TRUE))
# Load necessary packages
library(httr)
library(readr)  # For the cols() function
# Untar the file in Kaggle
untar("lax_to_jfk.tar.gz")
# Read the CSV file using readr
sub_airline <- read_csv("D:/FPT/Kihoc/fall2024/DRS301m/lab/lab3/lax_to_jfk/lax_to_jfk.csv", col_types = cols(DivDistance = col_number(), DivArrDelay = col_number()))
# Check the first few rows
head(sub_airline)
# 1. Inspect for missing values
print("Missing values summary:")
print(summary(is.na(sub_airline)))
print(sapply(sub_airline, function(x) sum(is.na(x)))) # Missing values per column
library(httr)
library(readr)
library(dplyr)
library(tidyr)
# 2. Handling missing values in specific columns
# Replace and remove
sub_airline_cleaned <- sub_airline %>%
mutate(across(c(CarrierDelay, WeatherDelay, NASDelay, SecurityDelay, LateAircraftDelay), ~replace_na(., 0))) %>%
select(-DivDistance, -DivArrDelay)
# Check the first few rows of the cleaned data
head(sub_airline_cleaned)
print("Missing values summary after handling structural NAs:")
print(summary(is.na(sub_airline_cleaned)))
print(sapply(sub_airline_cleaned, function(x) sum(is.na(x))))
# Simple scaling (dividing by max)
sub_airline_cleaned <- sub_airline_cleaned %>%
mutate(ArrDelay_simple_scaled = ArrDelay / max(ArrDelay, na.rm = TRUE),
DepDelay_simple_scaled = DepDelay / max(DepDelay, na.rm = TRUE))
# Min-Max Scaling
sub_airline_cleaned <- sub_airline_cleaned %>%
mutate(ArrDelay_minmax_scaled = (ArrDelay - min(ArrDelay, na.rm = TRUE)) /
(max(ArrDelay, na.rm = TRUE) - min(ArrDelay, na.rm = TRUE)),
DepDelay_minmax_scaled = (DepDelay - min(DepDelay, na.rm = TRUE)) /
(max(DepDelay, na.rm = TRUE) - min(DepDelay, na.rm = TRUE)))
# Z-score Standardization
sub_airline_cleaned <- sub_airline_cleaned %>%
mutate(ArrDelay_zscore = (ArrDelay - mean(ArrDelay, na.rm = TRUE)) / sd(ArrDelay, na.rm = TRUE),
DepDelay_zscore = (DepDelay - mean(DepDelay, na.rm = TRUE)) / sd(DepDelay, na.rm = TRUE))
# 3. Compare the results using histograms
install.packages("ggplot2")
library(ggplot2)
# ArrDelay comparison
p1 <- ggplot(sub_airline_cleaned, aes(x = ArrDelay_simple_scaled)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.6) +
ggtitle("ArrDelay: Simple Scaling") +
theme_minimal()
p2 <- ggplot(sub_airline_cleaned, aes(x = ArrDelay_minmax_scaled)) +
geom_histogram(bins = 30, fill = "green", alpha = 0.6) +
ggtitle("ArrDelay: Min-Max Scaling") +
theme_minimal()
p3 <- ggplot(sub_airline_cleaned, aes(x = ArrDelay_zscore)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.6) +
ggtitle("ArrDelay: Z-Score Standardization") +
theme_minimal()
# ArrDelay comparison
p1 <- ggplot(sub_airline_cleaned, aes(x = ArrDelay_simple_scaled)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.6) +
ggtitle("ArrDelay: Simple Scaling") +
theme_minimal()
# ArrDelay comparison
# Load necessary packages
library(httr)
library(readr)
library(dplyr)  # For %>%, mutate(), and select()
library(tidyr)  # For replace_na()
library(ggplot2) # For plotting
# ... (rest of the code, including data loading and cleaning) ...
# ArrDelay comparison
p1 <- ggplot(sub_airline_cleaned, aes(x = ArrDelay_simple_scaled)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.6) +
ggtitle("ArrDelay: Simple Scaling") +
theme_minimal()
p2 <- ggplot(sub_airline_cleaned, aes(x = ArrDelay_minmax_scaled)) +
geom_histogram(bins = 30, fill = "green", alpha = 0.6) +
ggtitle("ArrDelay: Min-Max Scaling") +
theme_minimal()
p3 <- ggplot(sub_airline_cleaned, aes(x = ArrDelay_zscore)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.6) +
ggtitle("ArrDelay: Z-Score Standardization") +
theme_minimal()
# ArrDelay comparison
# Load necessary packages
library(httr)
library(readr)
library(dplyr)  # For %>%, mutate(), and select()
library(tidyr)  # For replace_na()
library(ggplot2) # For plotting
# ... (rest of the code, including data loading and cleaning) ...
# ArrDelay comparison
p1 <- ggplot(sub_airline_cleaned, aes(x = ArrDelay_simple_scaled)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.6) +
ggtitle("ArrDelay: Simple Scaling") +
theme_minimal()
p2 <- ggplot(sub_airline_cleaned, aes(x = ArrDelay_minmax_scaled)) +
geom_histogram(bins = 30, fill = "green", alpha = 0.6) +
ggtitle("ArrDelay: Min-Max Scaling") +
theme_minimal()
p3 <- ggplot(sub_airline_cleaned, aes(x = ArrDelay_zscore)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.6) +
ggtitle("ArrDelay: Z-Score Standardization") +
theme_minimal()
# DepDelay comparison
p4 <- ggplot(sub_airline_cleaned, aes(x = DepDelay_simple_scaled)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.6) +
ggtitle("DepDelay: Simple Scaling") +
theme_minimal()
p5 <- ggplot(sub_airline_cleaned, aes(x = DepDelay_minmax_scaled)) +
geom_histogram(bins = 30, fill = "green", alpha = 0.6) +
ggtitle("DepDelay: Min-Max Scaling") +
theme_minimal()
p6 <- ggplot(sub_airline_cleaned, aes(x = DepDelay_zscore)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.6) +
ggtitle("DepDelay: Z-Score Standardization") +
theme_minimal()
print(p1)
print(p2)
print(p3)
print(p1)
print(p2)
print(p3)
print(p4)
print(p5)
print(p6)
# 1. Create a histogram of the ArrDelay column
p_hist <- ggplot(sub_airline_cleaned, aes(x = ArrDelay)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.6) +
ggtitle("Histogram of ArrDelay") +
theme_minimal()
# Print the histogram
print(p_hist)
# 2. Implement a binning strategy: Divide ArrDelay into 4 bins (quantiles)
sub_airline_cleaned <- sub_airline_cleaned %>%
mutate(ArrDelay_bins = cut(ArrDelay,
breaks = 4, # 4 bins
labels = c("Very Early", "On Time", "Moderate Delay", "Severe Delay"),
include.lowest = TRUE))
# 3. Visualize the results: Bar plot of the binned data
p_bins <- ggplot(sub_airline_cleaned, aes(x = ArrDelay_bins)) +
geom_bar(fill = "purple", alpha = 0.7) +
ggtitle("ArrDelay Binned into 4 Categories") +
xlab("ArrDelay Bins") +
ylab("Frequency") +
theme_minimal()
# Print the binned data visualization
print(p_bins)
library(dplyr)
# 1. Create dummy variables for the "Reporting_Airline" column
# Use model.matrix to create dummy variables for categorical data
airline_dummies <- model.matrix(~ Reporting_Airline - 1, data = sub_airline_cleaned)
airline_dummies <- as.data.frame(airline_dummies)  # Convert to data frame
# 2. Create indicator variables for the "Month" column using the "DepDelay" values
# Create dummy variables for "Month"
month_dummies <- model.matrix(~ Month - 1, data = sub_airline_cleaned)
month_dummies <- as.data.frame(month_dummies)  # Convert to data frame
# Multiply the dummy variables by "DepDelay" values instead of using 1s and 0s
month_dummies_depdelay <- month_dummies * sub_airline_cleaned$DepDelay
# 3. Combine the original data with the new dummy variables
sub_airline_transformed <- cbind(sub_airline_cleaned, airline_dummies, month_dummies_depdelay)
# Display the first few rows to verify
head(sub_airline_transformed)
# 1. Count the number of data points for each airline
airline_counts <- sub_airline_cleaned %>%
group_by(Reporting_Airline) %>%
summarise(count = n())
# 2. Create a bar plot
p_airline <- ggplot(airline_counts, aes(x = Reporting_Airline, y = count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
ggtitle("Number of Data Points for Each Airline") +
xlab("Airline") +
ylab("Number of Data Points") +
theme_minimal()
# Print the bar plot
print(p_airline)
