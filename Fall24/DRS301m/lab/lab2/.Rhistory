GROUP BY YEAR
ORDER BY YEAR;
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT PRIMARY_TYPE, YEAR, COUNT(*) AS count
FROM crime_data
GROUP BY PRIMARY_TYPE, YEAR
ORDER BY YEAR, PRIMARY_TYPE
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
query <- "
SELECT PRIMARY_TYPE, YEAR, COUNT(*) AS count
FROM crime_data
GROUP BY PRIMARY_TYPE, YEAR
ORDER BY YEAR, PRIMARY_TYPE
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
query <- "
SELECT PRIMARY_TYPE, YEAR, COUNT(*) AS count
FROM your_table_name  -- Thay your_table_name bằng tên bảng thực tế
GROUP BY PRIMARY_TYPE, YEAR
ORDER BY YEAR, PRIMARY_TYPE
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
query <- "
SELECT YEAR(DATE) AS year, PRIMARY_TYPE AS crime_type, COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY YEAR(DATE), PRIMARY_TYPE
ORDER BY year, total_cases DESC
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT YEAR(DATE) AS year, COMMUNITY_AREA_NUMBER AS community_area, COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY YEAR(DATE), COMMUNITY_AREA_NUMBER
ORDER BY year, total_cases DESC
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
CASE
WHEN HOUR(DATE) < 12 THEN 'Morning'
WHEN HOUR(DATE) < 18 THEN 'Afternoon'
ELSE 'Evening'
END AS time_of_day,
COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY time_of_day
ORDER BY FIELD(time_of_day, 'Morning', 'Afternoon', 'Evening')"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
CASE
WHEN MONTH(DATE) IN (12, 1, 2) THEN 'Winter'
WHEN MONTH(DATE) IN (3, 4, 5) THEN 'Spring'
WHEN MONTH(DATE) IN (6, 7, 8) THEN 'Summer'
WHEN MONTH(DATE) IN (9, 10, 11) THEN 'Fall'
END AS Season,
COUNT(*) AS total_cases
FROM ChicagoCrime
WHERE DATE IS NOT NULL
GROUP BY Season
ORDER BY total_cases DESC
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
PRIMARY_TYPE,
YEAR(DATE) AS year,
COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY PRIMARY_TYPE, year
ORDER BY total_cases DESC
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
LOCATION_DESCRIPTION,
COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY LOCATION_DESCRIPTION
ORDER BY total_cases DESC
LIMIT 10
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
COUNT(*) AS total_incidents,
SUM(CASE WHEN ARREST = TRUE THEN 1 ELSE 0 END) AS total_arrests
FROM ChicagoCrime
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
COMMUNITY_AREA_NUMBER,
YEAR,
COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY COMMUNITY_AREA_NUMBER, YEAR
ORDER BY total_cases DESC
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
LOCATION_DESCRIPTION,
COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY LOCATION_DESCRIPTION
ORDER BY total_cases DESC
LIMIT 10
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
LOCATION_DESCRIPTION,
PRIMARY_TYPE,
YEAR,
COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY LOCATION_DESCRIPTION, PRIMARY_TYPE, YEAR
ORDER BY LOCATION_DESCRIPTION, YEAR, total_cases DESC
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT COUNT(*) AS total_incidents,
SUM(CASE WHEN ARREST = 'true' THEN 1 ELSE 0 END) AS total_arrests,
(SUM(CASE WHEN ARREST = 'true' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS arrest_percentage
FROM crime_data
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
query <- "
SELECT COUNT(*) AS total_incidents,
SUM(CASE WHEN ARREST = 'true' THEN 1 ELSE 0 END) AS total_arrests,
(SUM(CASE WHEN ARREST = 'true' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS arrest_percentage
FROM your_schema_name.crime_data
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
query <- "
SELECT COUNT(*) AS total_incidents,
SUM(CASE WHEN ARREST = 'true' THEN 1 ELSE 0 END) AS total_arrests,
(SUM(CASE WHEN ARREST = 'true' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS arrest_percentage
FROM your_schema_name.crime_data
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
query <- "
SELECT
COUNT(*) AS total_incidents,
SUM(CASE WHEN arrest = 'TRUE' THEN 1 ELSE 0 END) AS total_arrests
FROM ChicagoCrime;
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
total_incidents <- as.numeric(result$total_incidents)
total_arrests <- as.numeric(result$total_arrests)
if (!is.na(total_incidents) && !is.na(total_arrests)) {
if (total_incidents > 0) {
percentage_arrests <- (total_arrests / total_incidents) * 100
cat(sprintf("Percentage of total arrests compared to total incidents: %.2f%%\n", percentage_arrests))
} else {
cat("No incidents found.\n")
}
} else {
cat("Error: Non-numeric data encountered.\n")
}
# Optionally, you can also print the total values for clarity
cat(sprintf("Total Incidents: %d\n", total_incidents))
cat(sprintf("Total Arrests: %d\n", total_arrests))
```{r}
```{r}
```{r}
install.packages("RJDBC")
install.packages('tinytex')
tinytex::install_tinytex()
install.packages("tinytex")
rmarkdown::render("SE183091_Nguyen_Thanh_Hoa.Rmd", output_format = "pdf_document")
rmarkdown::render("SE183091_Nguyen_Thanh_Hoa.Rmd", output_format = "pdf_document")
install.packages("RJDBC")
system("apt-get install -y default-jdk")
library(RJDBC)
install.packages("DBI")
install.packages("RSQLite")
# Tải thư viện
install.packages("rJava")
library(RJDBC)
# Đường dẫn đến JDBC driver
drv <- JDBC("com.ibm.db2.jcc.DB2Driver", "C:/JavaR/jdbc_sqlj/db2jcc4.jar")
install.packages("RMySQL")
library(RJDBC)
# Đường dẫn đến tệp jar của MySQL Connector/J
jdbc_driver <- JDBC("com.mysql.cj.jdbc.Driver", "C:/JavaR/mysql-connector-j-9.0.0/mysql-connector-j-9.0.0/mysql-connector-j-9.0.0.jar", identifier.quote="`")
# Cung cấp thông tin kết nối
hostname <- "localhost"
port <- "3306"
dbname <- "lab1_dsr"
username <- "root1"
password <- "123456789"
# Tạo chuỗi kết nối
url <- paste0("jdbc:mysql://", hostname, ":", port, "/", dbname)
# Kết nối đến cơ sở dữ liệu
conn <- dbConnect(jdbc_driver, url, username, password)
# Kiểm tra kết nối
if (!is.null(conn)) {
print("Kết Nối Thành Công!")
} else {
print("Kết nối Thất Bại!")
}
library(RJDBC)
# Đường dẫn đến tệp jar của MySQL Connector/J
jdbc_driver <- JDBC("com.mysql.cj.jdbc.Driver", "C:/JavaR/mysql-connector-j-9.0.0/mysql-connector-j-9.0.0/mysql-connector-j-9.0.0.jar", identifier.quote="`")
# Cung cấp thông tin kết nối
hostname <- "localhost"
port <- "3306"
dbname <- "lab1_dsr"
username <- "root1"
password <- "123456789"
# Tạo chuỗi kết nối
url <- paste0("jdbc:mysql://", hostname, ":", port, "/", dbname)
# Kết nối đến cơ sở dữ liệu
conn <- dbConnect(jdbc_driver, url, username, password)
# Kiểm tra kết nối
if (!is.null(conn)) {
print("Kết Nối Thành Công!")
} else {
print("Kết nối Thất Bại!")
}
# Đọc dữ liệu từ tệp CSV
file_path <- file.choose()
crime_data <- read.csv(file_path)
# Hiển thị một vài dòng dữ liệu để kiểm tra
head(crime_data)
# Hiển thị tổng quan dữ liệu (summary)
summary(crime_data)
# Nhập dữ liệu trực tiếp vào MySQL
dbWriteTable(conn,"ChicagoCrime", crime_data, append = TRUE, row.names = FALSE, overwrite = FALSE)
# Kiểm tra dữ liệu trong bảng MySQL
dbGetQuery(conn, "SELECT * FROM ChicagoCrimeData LIMIT 10")
query <-
"
SELECT PRIMARY_TYPE, COUNT(*) AS total_cases
FROM ChicagoCrimeData
GROUP BY PRIMARY_TYPE
ORDER BY total_cases DESC
LIMIT 1;
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT PRIMARY_TYPE, COUNT(*) AS total_cases
FROM ChicagoCrimeData
GROUP BY PRIMARY_TYPE;
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT YEAR, COUNT(*) AS total_cases
FROM ChicagoCrimeData
GROUP BY YEAR;
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT COUNT(*) AS non_arrest_cases
FROM ChicagoCrimeData
WHERE ARREST = FALSE;
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT COMMUNITY_AREA_NUMBER, COUNT(*) AS total_cases
FROM ChicagoCrimeData
GROUP BY COMMUNITY_AREA_NUMBER
ORDER BY total_cases DESC;
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT COUNT(*) AS missing_location_cases
FROM ChicagoCrimeData
WHERE LATITUDE IS NULL OR LONGITUDE IS NULL;
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT YEAR, COUNT(*) AS total_cases
FROM ChicagoCrimeData
GROUP BY YEAR
ORDER BY YEAR;
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT YEAR(DATE) AS year, PRIMARY_TYPE AS crime_type, COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY YEAR(DATE), PRIMARY_TYPE
ORDER BY year, total_cases DESC
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT YEAR(DATE) AS year, COMMUNITY_AREA_NUMBER AS community_area, COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY YEAR(DATE), COMMUNITY_AREA_NUMBER
ORDER BY year, total_cases DESC
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
CASE
WHEN HOUR(DATE) < 12 THEN 'Morning'
WHEN HOUR(DATE) < 18 THEN 'Afternoon'
ELSE 'Evening'
END AS time_of_day,
COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY time_of_day
ORDER BY FIELD(time_of_day, 'Morning', 'Afternoon', 'Evening')"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
CASE
WHEN MONTH(DATE) IN (12, 1, 2) THEN 'Winter'
WHEN MONTH(DATE) IN (3, 4, 5) THEN 'Spring'
WHEN MONTH(DATE) IN (6, 7, 8) THEN 'Summer'
WHEN MONTH(DATE) IN (9, 10, 11) THEN 'Fall'
END AS Season,
COUNT(*) AS total_cases
FROM ChicagoCrime
WHERE DATE IS NOT NULL
GROUP BY Season
ORDER BY total_cases DESC
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
PRIMARY_TYPE,
YEAR(DATE) AS year,
COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY PRIMARY_TYPE, year
ORDER BY total_cases DESC
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
LOCATION_DESCRIPTION,
COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY LOCATION_DESCRIPTION
ORDER BY total_cases DESC
LIMIT 10
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
COUNT(*) AS total_incidents,
SUM(CASE WHEN arrest = 'TRUE' THEN 1 ELSE 0 END) AS total_arrests
FROM ChicagoCrime;
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
total_incidents <- as.numeric(result$total_incidents)
total_arrests <- as.numeric(result$total_arrests)
if (!is.na(total_incidents) && !is.na(total_arrests)) {
if (total_incidents > 0) {
percentage_arrests <- (total_arrests / total_incidents) * 100
cat(sprintf("Percentage of total arrests compared to total incidents: %.2f%%\n", percentage_arrests))
} else {
cat("No incidents found.\n")
}
} else {
cat("Error: Non-numeric data encountered.\n")
}
# Optionally, you can also print the total values for clarity
cat(sprintf("Total Incidents: %d\n", total_incidents))
cat(sprintf("Total Arrests: %d\n", total_arrests))
### Problem 15
**Which community areas have the highest frequency of crimes? Does this frequency change over time?**
query <- "
SELECT
COMMUNITY_AREA_NUMBER,
YEAR,
COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY COMMUNITY_AREA_NUMBER, YEAR
ORDER BY total_cases DESC
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
query <- "
SELECT
LOCATION_DESCRIPTION,
COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY LOCATION_DESCRIPTION
ORDER BY total_cases DESC
LIMIT 10
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
```{r}
query <- "
SELECT
LOCATION_DESCRIPTION,
PRIMARY_TYPE,
YEAR,
COUNT(*) AS total_cases
FROM ChicagoCrime
GROUP BY LOCATION_DESCRIPTION, PRIMARY_TYPE, YEAR
ORDER BY LOCATION_DESCRIPTION, YEAR, total_cases DESC
"
# Thực thi truy vấn
result <- dbGetQuery(conn, query)
# In kết quả
print(result)
install.packages("knitr")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("rmarkdown")
# Thiết lập CRAN mirror
options(repos = c(CRAN = "https://cran.rstudio.com/"))
# Kiểm tra và cài đặt các gói cần thiết
required_packages <- c("rmarkdown", "tinytex", "RJDBC")
install.packages(setdiff(required_packages, installed.packages()[,"Package"]))
# Cài đặt TinyTeX nếu chưa có
if (!tinytex::is_tinytex()) {
tinytex::install_tinytex()  # Cài đặt TinyTeX
}
# Kiểm tra cài đặt TinyTeX (đảm bảo lệnh tlmgr hoạt động)
tinytex::tlmgr_install()
# Chạy render để chuyển file Rmd sang PDF
rmarkdown::render("SE183091_Nguyen_Thanh_Hoa.Rmd", output_format = "pdf_document")
tinytex::install_tinytex()
install.packages("RJDBC")
