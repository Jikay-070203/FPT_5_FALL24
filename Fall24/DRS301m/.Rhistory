return("Đạt")
} else if (diem >= 50 & tham_gia == FALSE) {
return("Không đạt (Vắng)")
} else {
return("Rớt")
}
}
# tạo dataframe
df <- data.frame(
ten = c("An","Bình","Cường"),
diem = c(85,60,45),
tham_gia = c(TRUE,TRUE,FALSE)
)
# xác định kết quả dựa trên các cột khác nhau như điểm số và có hay không sự tham gia của sinh viên:
ket_qua <- function(diem, tham_gia) {
if (diem >= 50 & tham_gia == TRUE) {
return("Đạt")
} else if (diem >= 50 & tham_gia == FALSE) {
return("Không đạt (Vắng)")
} else {
return("Rớt")
}
}
# Áp dụng hàm cho dataframe sử dụng apply
df$ket_qua <- apply(df, 1, function(row) ket_qua(row["diem"], row["tham_gia"]))
print(df)
# tạo dataframe
df <- data.frame(
ten = c("An","Bình","Cường"),
diem = c(85,60,45),
tham_gia = c(TRUE,TRUE,FALSE)
)
# xác định kết quả dựa trên các cột khác nhau như điểm số và có hay không sự tham gia của sinh viên:
ket_qua <- function(diem, tham_gia) {
if (diem >= 50 & tham_gia == TRUE) {
return("Đạt")
} else if (diem >= 50 & tham_gia == FALSE) {
return("Không đạt (Vắng)")
} else {
return("Rớt")
}
}
# Áp dụng hàm cho dataframe sử dụng apply
df$ket_qua <- apply(df, 1, function(row) ket_qua(row["diem"], row["tham_gia"]))
print(df)
install.packages("dplyr")
library(dplyr)
# Tạo dataframe
df <- data.frame(
ten = c("An", "Bình", "Cường"),
diem = c(85, 60, 45),
tham_gia = c(TRUE, TRUE, FALSE)
)
# Sử dụng mutate và ifelse để thêm cột 'ket_qua'
df <- df %>%
mutate(ket_qua = ifelse(diem >= 50 & tham_gia == TRUE, "Đạt",
ifelse(diem >= 50 & tham_gia == FALSE, "Không đạt (vắng)",
"Rớt")))
# Tạo dataframe
df <- data.frame(
ten = c("An", "Bình", "Cường"),
diem = c(85, 60, 45),
tham_gia = c(TRUE, TRUE, FALSE)
)
# Sử dụng mutate và ifelse để thêm cột 'ket_qua'
df <- df %>%
mutate(ket_qua = ifelse(diem >= 50 & tham_gia == TRUE, "Đạt",
ifelse(diem >= 50 & tham_gia == FALSE, "Không đạt (vắng)",
"Rớt")))
print(df)
#khởi tạo biến
product_value <-1
i<-1
#vòng lặp while
while (i ==44) {
product_value <- i * 46
i <- i+1
}
#in kết quả
print(product_value)
#khởi tạo biến
product_value <-1
i<-1
#vòng lặp while
while (i <=44) {
product_value <- i * 46
i <- i+1
}
#in kết quả
print(product_value)
#khởi tạo biến
product_value <-1
i<-1
#vòng lặp while
while (i <=44) {
product_value <- i * 46
i <- i+1
}
#in kết quả
print(product_value)
#khởi tạo biế
sum_value <- 0
i <-1
#vòng lặp while để tính tổng từ 1 đến 63
while (i <=63){
sum_value <- sum_value + i
i<-i+1
}
print(sum_value)
#khởi tạo biế
sum_value <- 0
i <-1
#vòng lặp while để tính tổng từ 1 đến 63
while (i <=63){
sum_value <- sum_value + i
i<-i+1
}
print(sum_value)
#khởi tạo biế
sum_value <- 0
i <-1
#vòng lặp while để tính tổng từ 1 đến 63
while (i <=63){
sum_value <- sum_value + i
i<-i+1
}
print(sum_value)
count <-1
#vòng lặp while với break
while (TRUE){
print(count)
counnt <- count + 1
if (count >5){
}
}
count <-1
#vòng lặp while với break
while (TRUE){
print(count)
counnt <- count + 1
if (count >5){
break
}
}
count <-1
#vòng lặp while với break
while (TRUE){
print(count)
counnt <- count + 1
if (count >5){
break
}
}
count <-1
#vòng lặp while với break
while (TRUE){
print(count)
count <- count + 1
if (count >5){
break
}
}
# Yêu cầu người dùng nhập một số nguyên n
n <- as.integer(readline(prompt = "Nhập một số nguyên n: "))
# Kiểm tra xem n có hợp lệ hay không
if (n <= 2) {
cat("Không có số nguyên tố nào nhỏ hơn", n)
} else {
# Khởi tạo biến i = 2, là số nguyên tố đầu tiên
i <- 2
# Sử dụng vòng lặp while để tìm và in ra các số nguyên tố nhỏ hơn n
while (i < n) {
# Khởi tạo biến j = 2 và flag = TRUE
j <- 2
flag <- TRUE
# Sử dụng vòng lặp while để kiểm tra xem i có phải là số nguyên tố hay không
while (j <= sqrt(i)) {
if (i %% j == 0) {
# Nếu i chia hết cho j thì i không phải là số nguyên tố
flag <- FALSE
break
}
j <- j + 1
}
# Nếu flag vẫn là TRUE sau khi kết thúc vòng lặp while thì i là số nguyên tố
if (flag) {
cat(i, " ")
}
i <- i + 1
}
}
#Tạo một số ngẫu nhiên từ 1 đến 100
set.seed(Sys.time())#tạo số ngẫu nhiên sau mỗi lần chạy
random_number <- sample(1:100,1)
#khởi tạo số lần đoán
attempt <- 0
#Bắt đầu trò chơi đoán số
while(attempt < 3){
#Yêu cầu người dùng nhập số
guess <- as.integer(readline(prompt = "Hãy đoán 1 số từ 1 đến 100:"))
#Kiểm tra nếu người dùng nhập đúng số
result <- ifelse(guess== random_number,"Chúc mừng bạn, Chúng ta sinh ra là của nhau!","Cố lên bạn nhé, mãi yêu!")
#In kết quả
print(result)
#Nếu đoán đúng, thoát trò chơi
if(guess==random_number){
break
}
#Tăng số lần đoán
attempt <- attempt +1
}
#Nếu quá 3 lần , thoát game
if(attempt == 3){
print("Chúng ta không thuộc về nhau,tạm biệt")
}
100
10
#Tạo một số ngẫu nhiên từ 1 đến 100
set.seed(Sys.time())#tạo số ngẫu nhiên sau mỗi lần chạy
random_number <- sample(1:100,1)
#khởi tạo số lần đoán
attempt <- 0
#Bắt đầu trò chơi đoán số
while(attempt < 3){
#Yêu cầu người dùng nhập số
guess <- as.integer(readline(prompt = "Hãy đoán 1 số từ 1 đến 100:"))
#Kiểm tra nếu người dùng nhập đúng số
result <- ifelse(guess== random_number,"Chúc mừng bạn, Chúng ta sinh ra là của nhau!","Cố lên bạn nhé, mãi yêu!")
#In kết quả
print(result)
#Nếu đoán đúng, thoát trò chơi
if(guess==random_number){
break
}
#Tăng số lần đoán
attempt <- attempt +1
}
#Nếu quá 3 lần , thoát game
if(attempt == 3){
print("Chúng ta không thuộc về nhau,tạm biệt")
}
#Tạo một số ngẫu nhiên từ 1 đến 100
set.seed(Sys.time())#tạo số ngẫu nhiên sau mỗi lần chạy
random_number <- sample(1:100,1)
#khởi tạo số lần đoán
attempt <- 0
#Bắt đầu trò chơi đoán số
while(attempt < 3){
#Yêu cầu người dùng nhập số
guess <- as.integer(readline(prompt = "Hãy đoán 1 số từ 1 đến 100:"))
#Kiểm tra nếu người dùng nhập đúng số
result <- ifelse(guess== random_number,"Chúc mừng bạn, Chúng ta sinh ra là của nhau!","Cố lên bạn nhé, mãi yêu!")
#In kết quả
print(result)
#Nếu đoán đúng, thoát trò chơi
if(guess==random_number){
break
}
#Tăng số lần đoán
attempt <- attempt +1
}
#Nếu quá 3 lần , thoát game
if(attempt == 3){
print("Chúng ta không thuộc về nhau,tạm biệt")
}
#Tạo một số ngẫu nhiên từ 1 đến 100
set.seed(Sys.time())#tạo số ngẫu nhiên sau mỗi lần chạy
random_number <- sample(1:100,1)
#khởi tạo số lần đoán
attempt <- 0
#Bắt đầu trò chơi đoán số
while(attempt < 3){
#Yêu cầu người dùng nhập số
guess <- as.integer(readline(prompt = "Hãy đoán 1 số từ 1 đến 100:"))
#Kiểm tra nếu người dùng nhập đúng số
result <- ifelse(guess== random_number,"Chúc mừng bạn, Chúng ta sinh ra là của nhau!","Cố lên bạn nhé, mãi yêu!")
#In kết quả
print(result)
#Nếu đoán đúng, thoát trò chơi
if(guess==random_number){
break
}
#Tăng số lần đoán
attempt <- attempt +1
}
#Nếu quá 3 lần , thoát game
if(attempt == 3){
print("Chúng ta không thuộc về nhau,tạm biệt")
}
#Tạo một số ngẫu nhiên từ 1 đến 100
set.seed(Sys.time())#tạo số ngẫu nhiên sau mỗi lần chạy
random_number <- sample(1:100,1)
#khởi tạo số lần đoán
attempt <- 0
#Bắt đầu trò chơi đoán số
while(attempt < 3){
#Yêu cầu người dùng nhập số
guess <- as.integer(readline(prompt = "Hãy đoán 1 số từ 1 đến 100:"))
#Kiểm tra nếu người dùng nhập đúng số
result <- ifelse(guess== random_number,"Chúc mừng bạn, Chúng ta sinh ra là của nhau!","Cố lên bạn nhé, mãi yêu!")
#In kết quả
print(result)
#Nếu đoán đúng, thoát trò chơi
if(guess==random_number){
break
}
#Tăng số lần đoán
attempt <- attempt +1
}
#Nếu quá 3 lần , thoát game
if(attempt == 3){
print("Chúng ta không thuộc về nhau,tạm biệt")
}
#Tạo một số ngẫu nhiên từ 1 đến 100
set.seed(Sys.time())#tạo số ngẫu nhiên sau mỗi lần chạy
random_number <- sample(1:100,1)
#khởi tạo số lần đoán
attempt <- 0
#Bắt đầu trò chơi đoán số
while(attempt < 3){
#Yêu cầu người dùng nhập số
guess <- as.integer(readline(prompt = "Hãy đoán 1 số từ 1 đến 100:"))
#Kiểm tra nếu người dùng nhập đúng số
result <- ifelse(guess== random_number,"Chúc mừng bạn, Chúng ta sinh ra là của nhau!","Cố lên bạn nhé, mãi yêu!")
#In kết quả
print(result)
#Nếu đoán đúng, thoát trò chơi
if(guess==random_number){
break
}
#Tăng số lần đoán
attempt <- attempt +1
}
#Nếu quá 3 lần , thoát game
if(attempt == 3){
print("Chúng ta không thuộc về nhau,tạm biệt")
}
for(i in 1:5){
print(i)
}
#tạo một danh sách chữa các chuỗi
movies <- list("titanic","Avatar","the avengers")
#Lặp qua danh sách
for (movie in movies) {
print(movie)
}
#khởi tạo biến
product_value <- 1
#vòng lặp for từ 1 đến 44
for (i in 1:44) {
product_value <- i *46
}
#in kết quả
print(product_value)
#hàm tính fibonacci
fibonacci_for <- function(n) {
#khởi tạo hai số đầu tiên trong đây fibonacci
fib1 <- 0
fib2 <- 1
#in ra hai số đầu tiên
cat(fib1,fib2)
#sử dụng vòng lặp for để tính các số tiếp theo
for (i in 3:n) {
fib_next <- fib1 + fib2 #số tiếp theo trong dãy là tổng của hai số trước
cat(" ", fib_next) #in ra số fibonacci tiếp theo
fib1 <- fib2 #cặp nhật giá trị cho bước lặp tiếp theo
fib2<- fib_next
}
cat("\n")
}
#hàm tính fibonacci
fibonacci_for <- function(n) {
#khởi tạo hai số đầu tiên trong đây fibonacci
fib1 <- 0
fib2 <- 1
#in ra hai số đầu tiên
cat(fib1,fib2)
#sử dụng vòng lặp for để tính các số tiếp theo
for (i in 3:n) {
fib_next <- fib1 + fib2 #số tiếp theo trong dãy là tổng của hai số trước
cat(" ", fib_next) #in ra số fibonacci tiếp theo
fib1 <- fib2 #cặp nhật giá trị cho bước lặp tiếp theo
fib2<- fib_next
}
cat("\n")
}
#gọi hàm để in
fibonacci_for(10)
#fibonanci while
fibonanci_for <- function(n){
#khởi tạo fib 1 và fib 2
fib1 <-0
fib2 <-1
#in ra hai số đầu tiên
cat(fib1,fib2)
#Khởi tạo biến đếm
i<-3
#Sử dụng vòng lặp while để tính các số tiếp theo
while(i<=n){
fib_next <- fib1+fib2
cat(" ",fib_next)
fib1 <- fib2
fib2 <- fib_next
i<-i+1
}
cat("\n")
}
fibonanci_for(10)
#fibonanci while
fibonanci_for <- function(n){
# Nếu n nhỏ hơn hoặc bằng 0, không có số Fibonanci
if(n<=0){
print("Số ko hợp lệ!")
} else if (n==1){
print(0)#nếu n=1, kết quả là 0
} else if (n==2){
print(c(0,1))#Nếu n=2, kết quả là dãy 0,1
} else{
fib1 <- 0
fib2 <- 1
#in ra hai số đầu tiên
cat(fib1, fib2)
#sử dụng vòng lặp for
for(i in 3:n){
fib_next <- fib1+fib2
cat(" ",fib_next)
fib1 <- fib2
fib2 <- fib_next
}
cat("\n")
}
}
fibonanci_for(10)
#truy vấn để lấy thông tin về các bảng trong cơ sở dữ liệu SQLite
query <- "SELECT name FROM sqlite_master WHERE type='table'"
#thực hiện truy vấn
result <- dbGetQuery(conn,query)
#truy vấn để lấy thông tin về các bảng trong cơ sở dữ liệu SQLite
query <- "SELECT name FROM sqlite_master WHERE type='table'"
#thực hiện truy vấn
result <- dbGetQuery(conn,query)
#truy vấn để lấy thông tin về các bảng trong cơ sở dữ liệu SQLite
query <- "SELECT name FROM sqlite_master WHERE type='table'"
#thực hiện truy vấn
result <- dbGetQuery(conn,query)
#truy vấn để lấy thông tin về các bảng trong cơ sở dữ liệu SQLite
query <- "SELECT name FROM sqlite_master WHERE type='table'"
#thực hiện truy vấn
result <- dbGetQuery(conn,query)
#truy vấn để lấy thông tin về các bảng trong cơ sở dữ liệu SQLite
query <- "SELECT name FROM sqlite_master WHERE type='table'"
#thực hiện truy vấn
result <- dbGetQuery(conn,query)
install.packages("RSQLite")
install.packages("DBI")
install.packages("RMySQL")
library(DBI)
library(RMySQL)
library(DBI)
library(RMySQL)
library(DBI)
library(RMySQL)
library(DBI)
library(RMySQL)
```{r}
# Tạo kết nối
con <- dbConnect(RMySQL::MySQL(),
dbname = "classicmodels",
host = "localhost",
user = "root",
password = ,
port = 3306)
# Tạo kết nối
con <- dbConnect(RMySQL::MySQL(),
dbname = "classicmodels",
host = "localhost",
user = "root",
password = "123456",
port = 3306)
install.packages("RMySQL")
# Tạo kết nối
con <- dbConnect(RMySQL::MySQL(),
dbname = "classicmodels",
host = "localhost",
user = "root",
password = "123456",
port = 3306)
# Tạo kết nối
con <- dbConnect(RMySQL::MySQL(),
dbname = "classicmodels",
host = "localhost",
user = "root",
password = "123456",
port = 3306)
# Tạo kết nối
con <- dbConnect(RMySQL::MySQL(),
dbname = "classicmodels",
host = "localhost",
user = "root",
password = "",
port = 3306)
print(con)
# Tạo kết nối
con <- dbConnect(RMySQL::MySQL(),
dbname = "classicmodels",
host = "localhost",
user = "root",
password = "",
port = 3306)
print(con)
SHOW TABLES;
SHOW TABLES
